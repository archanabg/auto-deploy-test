version: 2.1

executors:
  maven-executor:
    docker:
      - image: circleci/openjdk:8u171-jdk

jobs:

  build-and-test:
    executor: maven-executor

    steps:
      - checkout
      - restore_cache:
          key: auto-deploy-test-{{ checksum ".circleci/config.yml" }}
      - run:
          command: mvn verify -DexcludeLiveServerTests=true -Dmaven.javadoc.skip=true
      - persist_to_workspace:
          root: .
          paths:
            - .
      - store_artifacts:
          path: artifacts
      - store_test_results:
          path: artifacts/junit

  deploy-patch-version:
    executor: maven-executor
    steps:
      - deploy:
          versioncommand: mvn build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion} versions:commit

  deploy-minor-version:
    executor: maven-executor
    steps:
      - deploy:
          versioncommand: mvn build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.nextMinorVersion}.\${parsedVersion.incrementalVersion} versions:commit

  deploy-major-version:
    executor: maven-executor
    steps:
      - deploy:
          versioncommand: mvn build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.nextMajorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.incrementalVersion} versions:commit


commands:
  configure-gpg:
    steps:
      - run:
          name: Configure GPG private key for signing project artifacts in OSS Sonatype
          command: |
            echo $SECRING_GPG_ASC_BASE64 | base64 --decode | gpg --batch --no-tty --import --yes

  configure-git:
    steps:
      - run:
          name: Configure GIT with host fingerprint, user info and SSH key for pushing
          command: |
            mkdir -p ~/.ssh
            echo "Adding github.com as known host..."
            echo $GITHUB_FINGERPRINT >> ~/.ssh/known_hosts
            echo "Setting private SSH key for pushing new version to repo..."
            echo $GITHUB_COMMIT_KEY | base64 --decode >> ~/.ssh/id_rsa
            chmod 400 ~/.ssh/id_rsa # prevents "UNPROTECTED PRIVATE KEY FILE" error
            git config user.name "bbottema"
            git config user.email "b.bottema@projectnibble.org"

  deploy:
    parameters:
      versioncommand:
        type: string
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          key: auto-deploy-test-{{ checksum ".circleci/config.yml" }}
      - configure-gpg
      - configure-git
      - run:
          name: Release new version to Maven Central and push new project version to repo
          command: |
            echo "Starting new release..."
            << parameters.versioncommand >>
            MVN_VERSION=$(mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec)
            echo "Releasing version ${MVN_VERSION}..."
            mvn -s .circleci/maven-release-settings.xml clean deploy -DdeployAtEnd=true -DperformRelease=true -DskipTests -Dspotbugs.skip=true
            echo "Pushing new version and tag..."
            git commit -am "released ${MVN_VERSION}"
            git tag -a ${MVN_VERSION} -m "Release ${MVN_VERSION}"
            ssh-agent sh -c 'ssh-add ~/.ssh/id_rsa; git push git@github.com:bbottema/auto-deploy-test'
            ssh-agent sh -c 'ssh-add ~/.ssh/id_rsa; git push origin --tags'
            echo "Succesfully released ${MVN_VERSION}"
      - save_cache:
          paths:
            - ~/.m2
          key: auto-deploy-test-{{ checksum ".circleci/config.yml" }}


workflows:
  workflow:
    jobs:
      - build-and-test
      - approve-deploy-patch-version:
          type: approval
          requires:
            - build-and-test
      - approve-deploy-minor-version:
          type: approval
          requires:
            - build-and-test
      - approve-deploy-major-version:
          type: approval
          requires:
            - build-and-test
      - deploy-patch-version:
          requires:
            - approve-deploy-patch-version
      - deploy-minor-version:
          requires:
            - approve-deploy-minor-version
      - deploy-major-version:
          requires:
            - approve-deploy-major-version